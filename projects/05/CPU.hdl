// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // Check whether instruction is for computation or address set
    Not(in=instruction[15], out=addressInst);
    Not(in=addressInst, out=compInst);

    // Address Registry Input
        // Take ALU input if Compute instruction and destination1-bit is set
        And(a=compInst, b=instruction[5], out=ALUtoA);
        Mux16(a=instruction, b=aluO, sel=ALUtoA, out=instrMuxO);
        // Load instruction if Address instruction
        Or(a=addressInst, b=ALUtoA, out=loadA);
        ARegister(in=instrMuxO, load=loadA, out=aO);

    // ALU A/M input
    Mux16(a=aO, b=inM, sel=instruction[12], out=amMuxO);

    // Data Registry input
    And(a=compInst, b=instruction[4], out=loadD);
    DRegister(in=aluO, load=loadD, out=dO);
    
    // ALU performs computation
    ALU(x=dO, y=amMuxO, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluO, zr=zr, ng=ng);


    // Jump handling
        // LT
        And(a=ng, b=instruction[2], out=jlt);
        // EQ
        And(a=zr, b=instruction[1], out=jeq);
        // GT
        Or(a=zr, b=ng, out=le);
        Not(in=le, out=nle);
        And(a=nle, b=instruction[0], out=jgt);
        // Jump, if any jump condition is true AND Compute instruction is performed
        Or(a=jeq, b=jlt, out=jle);
        Or(a=jle, b=jgt, out=jump); 
        And(a=compInst, b=jump, out=pcLoad);
        // increment if not jump
        Not(in=pcLoad, out=incPc);
    
    // Outputs
        // PC control
        PC(in=aO, load=pcLoad, inc=incPc, reset=reset, out[0..14]=pc);
        // Forward ALU output to outM
        And16(a=aluO, b=aluO, out=outM);
        // Forward aO output to addressM
        And16(a=aO, b=aO, out[0..14]=addressM);
        // Write to M if Compute instruction and Memory-write-bit d3
        And(a=compInst, b=instruction[3], out=writeM);

}